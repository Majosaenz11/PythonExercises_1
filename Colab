{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1xIjYRFMM2LUubIuL-sii7vvbP-pLzIzI",
      "authorship_tag": "ABX9TyM6Vc9xGwsIHmw6gj3Mxztl",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Majosaenz11/PythonExercises_1/blob/main/Colab\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "67Uk8_P8Cu_t",
        "outputId": "c5452bd0-76d4-4394-ea62-cfbf9ab1d236"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the GitHub raw content URL of the file: https://en.wikipedia.org/wiki/Text_file#:~:text=A%20text%20file%20(sometimes%20spelled,within%20a%20computer%20file%20system.\n",
            "Number of words: 5601\n",
            "Number of sentences: 1200\n",
            "Number of paragraphs: 48\n",
            "Average word length: 16.93\n",
            "Most common words:\n",
            "a: 683\n",
            "class: 539\n",
            "mw: 438\n",
            "span: 403\n",
            "li: 372\n",
            "vector: 336\n",
            "href: 329\n",
            "title: 297\n",
            "div: 256\n",
            "wiki: 234\n"
          ]
        }
      ],
      "source": [
        "#Maria Jose Saenz Carmona. 2077609. IB. ARTIFICIAL INTELLIGENCE\n",
        "import requests\n",
        "import re\n",
        "from collections import Counter\n",
        "\n",
        "def count_words(text):\n",
        "    words = text.split()\n",
        "    return len(words)\n",
        "\n",
        "def count_sentences(text):\n",
        "    sentences = re.split(r'[.!?]', text)\n",
        "    return len(sentences)\n",
        "\n",
        "def count_paragraphs(text):\n",
        "    paragraphs = text.split('\\n\\n')\n",
        "    return len(paragraphs)\n",
        "\n",
        "def average_word_length(text):\n",
        "    words = text.split()\n",
        "    total_word_length = sum(len(word) for word in words)\n",
        "    return total_word_length / len(words) if len(words) > 0 else 0\n",
        "\n",
        "def most_common_words(text, n=10):\n",
        "    words = re.findall(r'\\b\\w+\\b', text.lower())\n",
        "    word_counts = Counter(words)\n",
        "    return word_counts.most_common(n)\n",
        "\n",
        "def main(url):\n",
        "    try:\n",
        "        response = requests.get(url)\n",
        "        if response.status_code == 200:\n",
        "            text = response.text\n",
        "\n",
        "            word_count = count_words(text)\n",
        "            sentence_count = count_sentences(text)\n",
        "            paragraph_count = count_paragraphs(text)\n",
        "            avg_word_length = average_word_length(text)\n",
        "            common_words = most_common_words(text)\n",
        "\n",
        "            print(f\"Number of words: {word_count}\")\n",
        "            print(f\"Number of sentences: {sentence_count}\")\n",
        "            print(f\"Number of paragraphs: {paragraph_count}\")\n",
        "            print(f\"Average word length: {avg_word_length:.2f}\")\n",
        "            print(\"Most common words:\")\n",
        "            for word, frequency in common_words:\n",
        "                print(f\"{word}: {frequency}\")\n",
        "        else:\n",
        "            print(f\"Failed to fetch content from {url}. Status code: {response.status_code}\")\n",
        "\n",
        "    except Exception as e:\n",
        "        print(f\"An error occurred: {str(e)}\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    github_url = input(\"Enter the GitHub raw content URL of the file: \")\n",
        "    main(github_url)"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "YmiuhFf3LcsT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "kPjz0hPfLdBL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Maria Jose Saenz Carmona. 2077609. IB. ARTIFICIAL INTELLIGENCE\n",
        "import random\n",
        "\n",
        "def number_guessing_game():\n",
        "    target_number = random.randint(1, 100)\n",
        "    attempts = 0\n",
        "\n",
        "    print(\"Welcome to the Number Guessing Game!\")\n",
        "    print(\"I've selected a random number between 1 and 100. Try to guess it.\")\n",
        "\n",
        "    while True:\n",
        "        try:\n",
        "            user_guess = int(input(\"Enter your guess: \"))\n",
        "            attempts += 1\n",
        "\n",
        "            if user_guess < 1 or user_guess > 100:\n",
        "                print(\"Please guess a number between 1 and 100.\")\n",
        "                continue\n",
        "\n",
        "            if user_guess < target_number:\n",
        "                print(\"The target number is higher. Try again.\")\n",
        "            elif user_guess > target_number:\n",
        "                print(\"The target number is lower. Try again.\")\n",
        "            else:\n",
        "                print(f\"Congratulations! You guessed the number {target_number} in {attempts} attempts.\")\n",
        "                break\n",
        "\n",
        "        except ValueError:\n",
        "            print(\"Invalid input. Please enter a valid number.\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    number_guessing_game()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9X5E-uLYDL4d",
        "outputId": "d22d3cf9-6b88-4817-8016-84f8ea7b6d88"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Welcome to the Number Guessing Game!\n",
            "I've selected a random number between 1 and 100. Try to guess it.\n",
            "Enter your guess: 30\n",
            "The target number is higher. Try again.\n",
            "Enter your guess: 40\n",
            "The target number is higher. Try again.\n",
            "Enter your guess: 60\n",
            "The target number is lower. Try again.\n",
            "Enter your guess: 50\n",
            "The target number is higher. Try again.\n",
            "Enter your guess: 54\n",
            "The target number is higher. Try again.\n",
            "Enter your guess: 57\n",
            "The target number is lower. Try again.\n",
            "Enter your guess: 56\n",
            "The target number is lower. Try again.\n",
            "Enter your guess: 55\n",
            "Congratulations! You guessed the number 55 in 8 attempts.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Maria Jose Saenz Carmona. 2077609. IB. ARTIFICIAL INTELLIGENCE\n",
        "import random\n",
        "\n",
        "# List of words for the game\n",
        "word_list = [\"python\", \"hangman\", \"programming\", \"challenge\", \"guess\"]\n",
        "\n",
        "def choose_word(word_list):\n",
        "    return random.choice(word_list)\n",
        "\n",
        "def display_word(word, guessed_letters):\n",
        "    display = \"\"\n",
        "    for letter in word:\n",
        "        if letter in guessed_letters:\n",
        "            display += letter\n",
        "        else:\n",
        "            display += \"_\"\n",
        "    return display\n",
        "\n",
        "def hangman():\n",
        "    word_to_guess = choose_word(word_list)\n",
        "    guessed_letters = []\n",
        "    attempts = 6\n",
        "\n",
        "    print(\"Welcome to Hangman!\")\n",
        "\n",
        "    while True:\n",
        "        current_display = display_word(word_to_guess, guessed_letters)\n",
        "        print(f\"Word: {current_display}\")\n",
        "        print(f\"Guessed letters: {', '.join(guessed_letters)}\")\n",
        "        print(f\"Attempts remaining: {attempts}\")\n",
        "\n",
        "        if current_display == word_to_guess:\n",
        "            print(\"Congratulations! You guessed the word correctly.\")\n",
        "            break\n",
        "\n",
        "        if attempts == 0:\n",
        "            print(f\"Game over! The word was '{word_to_guess}'.\")\n",
        "            break\n",
        "\n",
        "        guess = input(\"Guess a letter: \").lower()\n",
        "\n",
        "        if len(guess) != 1 or not guess.isalpha():\n",
        "            print(\"Invalid input. Please enter a single letter.\")\n",
        "            continue\n",
        "\n",
        "        if guess in guessed_letters:\n",
        "            print(\"You've already guessed that letter.\")\n",
        "            continue\n",
        "\n",
        "        guessed_letters.append(guess)\n",
        "\n",
        "        if guess not in word_to_guess:\n",
        "            print(\"Wrong guess!\")\n",
        "            attempts -= 1\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    hangman()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lM-URbYpDUkt",
        "outputId": "8015e49f-ee06-4938-eae0-d699b8294f6e"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Welcome to Hangman!\n",
            "Word: _______\n",
            "Guessed letters: \n",
            "Attempts remaining: 6\n",
            "Guess a letter: w\n",
            "Wrong guess!\n",
            "Word: _______\n",
            "Guessed letters: w\n",
            "Attempts remaining: 5\n",
            "Guess a letter: r\n",
            "Wrong guess!\n",
            "Word: _______\n",
            "Guessed letters: w, r\n",
            "Attempts remaining: 4\n",
            "Guess a letter: a\n",
            "Word: _a___a_\n",
            "Guessed letters: w, r, a\n",
            "Attempts remaining: 4\n",
            "Guess a letter: d\n",
            "Wrong guess!\n",
            "Word: _a___a_\n",
            "Guessed letters: w, r, a, d\n",
            "Attempts remaining: 3\n",
            "Guess a letter: h\n",
            "Word: ha___a_\n",
            "Guessed letters: w, r, a, d, h\n",
            "Attempts remaining: 3\n",
            "Guess a letter: n\n",
            "Word: han__an\n",
            "Guessed letters: w, r, a, d, h, n\n",
            "Attempts remaining: 3\n",
            "Guess a letter: m\n",
            "Word: han_man\n",
            "Guessed letters: w, r, a, d, h, n, m\n",
            "Attempts remaining: 3\n",
            "Guess a letter: g\n",
            "Word: hangman\n",
            "Guessed letters: w, r, a, d, h, n, m, g\n",
            "Attempts remaining: 3\n",
            "Congratulations! You guessed the word correctly.\n"
          ]
        }
      ]
    }
  ]
}